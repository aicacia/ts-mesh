{"version":3,"file":"index.js","sources":["../node_modules/eventemitter3/index.js","../src/Mesh.ts","../src/Peer.ts"],"sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import { EventEmitter } from \"eventemitter3\";\nimport { Buffer } from \"buffer\";\nimport type { IPeerData } from \"./Peer\";\nimport type { Peer } from \"./Peer\";\nimport { nextIntInRange, fromArray } from \"@aicacia/rand\";\n\nexport const DEFAULT_SYNC_MS = 60_000;\nexport const DEFAULT_MESSAGE_LAST_SEEN_DELETE_MS = 3 * 60_000;\n\nexport interface IMeshEvents {\n  data(data: any, from: string): void;\n}\n\nexport interface IMeshOptions {\n  maxConnections?: number;\n  syncMS?: number;\n  messageLastSeenDeleteMS?: number;\n}\n\nexport class Mesh extends EventEmitter<IMeshEvents> {\n  protected peer: Peer;\n  protected maxConnections = 6;\n  protected syncMS = DEFAULT_SYNC_MS;\n  protected messageLastSeenDeleteMS = DEFAULT_MESSAGE_LAST_SEEN_DELETE_MS;\n  protected messageId = 0;\n  protected messages: Map<string, number> = new Map();\n  protected payloadsToSend: Array<any> = [];\n\n  constructor(peer: Peer, options: IMeshOptions = {}) {\n    super();\n    this.peer = peer;\n    this.peer.on(\"data\", this.onData);\n    this.peer.on(\"join\", this.onDiscover);\n    this.peer.on(\"announce\", this.onDiscover);\n    this.peer.on(\"connection\", this.onConnection);\n    this.peer.once(\"connect\", this.onSync);\n    if (\n      typeof options.maxConnections === \"number\" &&\n      options.maxConnections > 0\n    ) {\n      this.maxConnections = options.maxConnections;\n    }\n    if (typeof options.syncMS === \"number\" && options.syncMS > 5000) {\n      this.syncMS = options.syncMS;\n    }\n    if (\n      typeof options.messageLastSeenDeleteMS === \"number\" &&\n      options.messageLastSeenDeleteMS > 0\n    ) {\n      this.messageLastSeenDeleteMS = options.messageLastSeenDeleteMS;\n    }\n    this.sync();\n  }\n\n  getPeer() {\n    return this.peer;\n  }\n  broadcast(payload: any) {\n    if (this.peer.getConnections().size === 0) {\n      this.payloadsToSend.push(payload);\n    } else {\n      return this.broadcastInternal(payload);\n    }\n  }\n\n  private broadcastInternal(payload: any) {\n    const from = this.peer.getId(),\n      id = this.messageId++,\n      messageId = `${from}-${id}`;\n\n    this.messages.set(messageId, Date.now());\n    this.peer.broadcast(\n      JSON.stringify({\n        id,\n        from,\n        payload,\n      })\n    );\n    return this;\n  }\n\n  private needsConnection() {\n    return this.peer.getConnections().size < this.maxConnections;\n  }\n\n  private onData = (data: IPeerData, _from: string) => {\n    if (typeof data === \"string\" || Buffer.isBuffer(data)) {\n      const json = JSON.parse(data.toString()),\n        messageId = `${json.from}-${json.id}`;\n\n      if (!this.messages.has(messageId)) {\n        this.messages.set(messageId, Date.now());\n        this.peer.broadcast(data);\n        this.emit(\"data\", json.payload, json.from);\n      }\n    }\n  };\n  private onDiscover = (id: string) => {\n    if (this.peer.getConnections().has(id)) {\n      return;\n    }\n    if (this.needsConnection()) {\n      this.peer.connectToInBackground(id);\n    } else {\n      this.peer.connectTo(id).then(() => {\n        const peers = Array.from(this.peer.getConnections().keys());\n\n        if (peers.length > 1) {\n          this.peer.disconnectFrom(getRandomIdExceptFor(peers, id));\n        }\n      });\n    }\n  };\n\n  private onConnection = () => {\n    if (this.payloadsToSend.length) {\n      this.payloadsToSend.forEach((payload) => this.broadcastInternal(payload));\n      this.payloadsToSend.length = 0;\n    }\n  };\n\n  private onSync = () => {\n    if (this.needsConnection()) {\n      this.peer.announce();\n    }\n    this.cleanOldMessages();\n    this.sync();\n  };\n\n  private sync() {\n    setTimeout(this.onSync, nextIntInRange(this.syncMS * 0.5, this.syncMS));\n  }\n\n  private cleanOldMessages() {\n    if (this.messages.size) {\n      const now = Date.now();\n\n      for (const [messageId, received] of this.messages.entries()) {\n        if (now - received > this.messageLastSeenDeleteMS) {\n          this.messages.delete(messageId);\n        }\n      }\n    }\n  }\n}\n\nfunction getRandomIdExceptFor(ids: string[], id: string): string {\n  const randomId = fromArray(ids).unwrap();\n\n  if (randomId === id) {\n    return getRandomIdExceptFor(ids, id);\n  } else {\n    return randomId;\n  }\n}\n","import { EventEmitter } from \"eventemitter3\";\nimport type { SimplePeerData, Instance } from \"simple-peer\";\nimport type SimplePeer from \"simple-peer\";\nimport { io, Socket } from \"socket.io-client\";\n\nexport type IPeerData = SimplePeerData;\nexport type PeerConnection = Instance;\n\nexport interface IPeerEvents {\n  join(this: Peer, id: string): void;\n  announce(this: Peer, id: string): void;\n  connect(this: Peer, id: string): void;\n  disconnect(this: Peer): void;\n  error(this: Peer, error: Error): void;\n  connection(this: Peer, connection: PeerConnection, id: string): void;\n  disconnection(this: Peer, connection: PeerConnection, id: string): void;\n  data(this: Peer, data: IPeerData, from: string): void;\n}\n\nexport interface IPeerOptions {\n  origin?: string;\n  namespace?: string;\n}\n\nexport class Peer extends EventEmitter<IPeerEvents> {\n  protected socket: Socket;\n  protected readonly connections: Map<string, PeerConnection> = new Map();\n  protected SimplePeer: SimplePeer.SimplePeer;\n\n  constructor(SimplePeer: SimplePeer.SimplePeer, options: IPeerOptions = {}) {\n    super();\n    this.SimplePeer = SimplePeer;\n    this.socket = io(\n      `${options.origin || \"wss://mesh.aicacia.com\"}/${options.namespace || \"\"}`\n    );\n    this.socket.on(\"signal\", this.onSignal);\n    this.socket.on(\"connect\", this.onConnect);\n    this.socket.on(\"disconnect\", this.onDisonnect);\n    this.socket.on(\"join\", this.onJoin);\n    this.socket.on(\"announce\", this.onAnnounce);\n    this.socket.on(\"leave\", this.onLeave);\n  }\n\n  getId() {\n    return this.socket.id;\n  }\n  isConnected() {\n    return this.socket.connected;\n  }\n  connected() {\n    return waitForSocket(this.socket);\n  }\n\n  getConnections(): ReadonlyMap<string, PeerConnection> {\n    return this.connections;\n  }\n\n  private onSignal = (data: RTCSessionDescription, from: string) => {\n    let connection = this.connections.get(from);\n\n    if (data.type === \"offer\" && (connection as any)?.initiator) {\n      this.disconnectFrom(from, false);\n      connection = undefined;\n    }\n    if (!connection) {\n      connection = this.createConnection(from, false);\n    }\n\n    if (!connection.destroyed) {\n      connection.signal(data);\n    }\n  };\n\n  private onConnect = () => {\n    this.emit(\"connect\", this.socket.id);\n  };\n  private onDisonnect = () => {\n    this.emit(\"disconnect\");\n    for (const [id, connection] of this.connections.entries()) {\n      this.emit(\"disconnection\", connection, id);\n      connection.destroy();\n    }\n    this.connections.clear();\n  };\n  private onJoin = (id: string) => {\n    if (id !== this.socket.id) {\n      this.emit(\"join\", id);\n    }\n  };\n  private onAnnounce = (id: string) => {\n    if (id !== this.socket.id) {\n      this.emit(\"announce\", id);\n    }\n  };\n  private onLeave = (id: string, _reason: string) => {\n    this.disconnectFrom(id);\n  };\n\n  send(to: string, data: IPeerData) {\n    const connection = this.connections.get(to);\n    if (connection?.connected) {\n      connection.send(data);\n    }\n    return this;\n  }\n  broadcast(data: IPeerData) {\n    for (const connection of this.connections.values()) {\n      if (connection.connected) {\n        connection.send(data);\n      }\n    }\n    return this;\n  }\n  announce() {\n    this.socket.emit(\"announce\");\n    return this;\n  }\n\n  get(id: string) {\n    return this.connections.get(id);\n  }\n  connectToInBackground(id: string) {\n    this.getOrCreateConnection(id, true);\n    return this;\n  }\n  connectTo(id: string) {\n    const connection = this.getOrCreateConnection(id, true);\n\n    return new Promise<PeerConnection>((resolve, reject) => {\n      if (connection.connected) {\n        resolve(connection);\n      } else {\n        const onConnect = () => {\n          removeListeners();\n          resolve(connection);\n        };\n        const onClose = () => {\n          removeListeners();\n          reject();\n        };\n        const onError = (error?: Error) => {\n          removeListeners();\n          reject(error);\n        };\n        const removeListeners = () => {\n          connection.off(\"connect\", onConnect);\n          connection.off(\"disconnect\", onClose);\n          connection.off(\"error\", onError);\n        };\n        connection.once(\"connect\", onConnect);\n        connection.once(\"disconnect\", onClose);\n        connection.once(\"error\", onError);\n      }\n    });\n  }\n  disconnectFrom(id: string, emit = true) {\n    const connection = this.connections.get(id);\n\n    if (connection) {\n      if (emit) {\n        this.emit(\"disconnection\", connection, id);\n      }\n      this.connections.delete(id);\n      connection.destroy();\n    }\n\n    return this;\n  }\n\n  private getOrCreateConnection(id: string, initiator: boolean) {\n    const connection = this.connections.get(id);\n\n    if (connection) {\n      return connection;\n    } else {\n      return this.createConnection(id, initiator);\n    }\n  }\n\n  private createConnection(id: string, initiator: boolean) {\n    const connection = new this.SimplePeer({\n      initiator,\n      trickle: false,\n    });\n\n    connection.on(\"signal\", (data: RTCSessionDescription) => {\n      this.socket.emit(\"signal\", id, data);\n    });\n    connection.on(\"data\", (data: IPeerData) => {\n      this.emit(\"data\", data, id);\n    });\n    connection.on(\"error\", (error) => {\n      this.disconnectFrom(id);\n      this.emit(\"error\", error);\n    });\n    connection.on(\"connect\", () => {\n      this.emit(\"connection\", connection, id);\n    });\n    connection.on(\"disconnect\", () => {\n      this.disconnectFrom(id);\n    });\n\n    this.connections.set(id, connection);\n\n    return connection;\n  }\n}\n\nexport function waitForSocket(socket: Socket) {\n  return new Promise<Socket>((resolve, reject) => {\n    if (socket.connected) {\n      resolve(socket);\n    } else {\n      const onConnect = () => {\n        removeListeners();\n        resolve(socket);\n      };\n      const onClose = () => {\n        removeListeners();\n        reject();\n      };\n      const onError = (error?: Error) => {\n        removeListeners();\n        reject(error);\n      };\n      const removeListeners = () => {\n        socket.off(\"connect\", onConnect);\n        socket.off(\"disconnect\", onClose);\n        socket.off(\"error\", onError);\n      };\n      socket.once(\"connect\", onConnect);\n      socket.once(\"disconnect\", onClose);\n      socket.once(\"error\", onError);\n    }\n  });\n}\n"],"names":["has","Object","prototype","hasOwnProperty","prefix","Events","EE","fn","context","once","this","addListener","emitter","event","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","EventEmitter","create","__proto__","eventNames","events","name","names","call","slice","getOwnPropertySymbols","concat","listeners","handlers","i","l","length","ee","Array","listenerCount","emit","a1","a2","a3","a4","a5","args","len","arguments","removeListener","undefined","apply","j","on","removeAllListeners","off","prefixed","module","Mesh","peer","maxConnections","syncMS","messageLastSeenDeleteMS","messageId","messages","Map","payloadsToSend","constructor","options","super","onData","onDiscover","onConnection","onSync","sync","getPeer","broadcast","payload","getConnections","size","broadcastInternal","from","getId","id","set","Date","now","JSON","stringify","needsConnection","data","_from","Buffer","isBuffer","json","parse","toString","connectToInBackground","connectTo","then","peers","keys","disconnectFrom","getRandomIdExceptFor","forEach","announce","cleanOldMessages","setTimeout","nextIntInRange","received","entries","delete","ids","randomId","fromArray","unwrap","Peer","socket","connections","SimplePeer","io","origin","namespace","onSignal","onConnect","onDisonnect","onJoin","onAnnounce","onLeave","isConnected","connected","waitForSocket","connection","get","type","initiator","createConnection","destroyed","signal","destroy","clear","_reason","send","to","values","getOrCreateConnection","Promise","resolve","reject","removeListeners","onClose","onError","error","trickle"],"mappings":"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"}